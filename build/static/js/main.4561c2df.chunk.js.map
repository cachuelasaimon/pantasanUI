{"version":3,"sources":["Reducers/sampleReducer.js","Actions/types.js","Reducers/index.js","store.js","components/Dashboard/header.js","components/Dashboard/DashboardButton.js","components/Dashboard/dashboard.js","App.js","serviceWorker.js","index.js"],"names":["initialState","list","id","uuid","name","reducer","state","action","type","payload","filter","item","combineReducers","sampleItem","sampleReducer","middleware","thunk","store","createStore","Reducer","compose","applyMiddleware","window","__REDUX_DEVTOOLS_EXTENSION__","header","Fragment","className","Component","DashboardButton","Event","this","props","label","onClick","Grid","styled","div","dashboard","CreateQuiz","console","log","CheckScores","ArrangeClass","ManageSchedule","TestYourself","SendResults","connect","App","Store","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"mRAGMA,EAAe,CACjBC,KAAM,CACF,CAACC,GAAIC,cAAQC,KAAM,eACnB,CAACF,GAAIC,cAAQC,KAAM,oBA0BZC,EAtBC,WAAiC,IAAhCC,EAA+B,uDAAzBN,EAAcO,EAAW,uCAC5C,OAAOA,EAAOC,MACV,ICZW,MDYD,OAAO,eACVF,GAEP,ICdW,MDcD,OAAO,2BACVA,GADG,IAENL,KAAK,GAAD,mBACGK,EAAML,MADT,CAEA,CAACC,GAAIC,cAAQC,KAAKG,EAAOE,aAGjC,ICpBc,SDoBD,OAAO,2BACbH,GADM,IAETL,KAAK,YACEK,EAAML,KAAKS,QAAO,SAAAC,GAAI,OAAIA,EAAKT,KAAOK,EAAOE,cAGxD,QAAS,OAAOH,IEzBTM,cAAgB,CAC3BC,WAAYC,ICEVC,EAAa,CAACC,KAWLC,EATDC,YACNC,EALa,GAObC,YACIC,IAAe,WAAf,EAAmBN,GACnBO,OAAOC,8BAAgCD,OAAOC,iC,oCCI3CC,E,4MAbXlB,MAAQ,G,uDAIJ,OACI,kBAAC,IAAMmB,SAAP,KAEI,yBAAKC,UAAU,UAAf,U,GATKC,aCgBNC,E,4MAdXtB,MAAQ,G,uDAGG,IACCuB,EAAUC,KAAKC,MAAfF,MACP,OACG,kBAAC,IAAMJ,SAAP,KAEI,yBAAKC,UAAS,UAAKI,KAAKC,MAAMC,MAAhB,qBAA0CC,QAASJ,S,GAVnDF,a,sOCW9B,IAAMO,E,MAAOC,EAAOC,IAAV,KAUJC,E,4MAEF/B,MAAQ,G,EAKRgC,WAAa,WACTC,QAAQC,IAAI,sB,EAIhBC,YAAc,WACVF,QAAQC,IAAI,uB,EAIhBE,aAAe,WACXH,QAAQC,IAAI,wB,EAIhBG,eAAiB,WACbJ,QAAQC,IAAI,0B,EAIhBI,aAAe,WACXL,QAAQC,IAAI,wB,EAIhBK,YAAc,WACVN,QAAQC,IAAI,uB,uDAKZ,OACI,yBAAKd,UAAU,gBACX,kBAACQ,EAAD,KACI,kBAAC,EAAD,MACI,kBAAC,EAAD,CAAiBL,MAAOC,KAAKQ,WAAYN,MAAM,gBAC/C,kBAAC,EAAD,CAAiBH,MAAOC,KAAKW,YAAaT,MAAM,WAChD,kBAAC,EAAD,CAAiBH,MAAOC,KAAKY,aAAcV,MAAM,kBACjD,kBAAC,EAAD,CAAiBH,MAAOC,KAAKa,eAAgBX,MAAM,oBACnD,kBAAC,EAAD,CAAiBH,MAAOC,KAAKe,YAAab,MAAM,iBAChD,kBAAC,EAAD,CAAiBH,MAAOC,KAAKc,aAAcZ,MAAM,wB,GA/CjDL,aA0DTmB,eAJS,SAAAxC,GAAK,MAAK,KAIM,GAAzBwC,CAA6BT,GCrD7BU,MAVf,WACE,OACE,yBAAKrB,UAAU,OACb,kBAAC,IAAD,CAAUT,MAAO+B,GACf,kBAAC,EAAD,SCVYC,QACW,cAA7B3B,OAAO4B,SAASC,UAEe,UAA7B7B,OAAO4B,SAASC,UAEhB7B,OAAO4B,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1B,QAAQ0B,MAAMA,EAAMC,c","file":"static/js/main.4561c2df.chunk.js","sourcesContent":["import { GET, ADD, DELETE } from '../Actions/types'\r\nimport { v1 as uuid } from 'uuid'\r\n\r\nconst initialState = {\r\n    list: [\r\n        {id: uuid(), name: \"Sample Item\"},\r\n        {id: uuid(), name: \"Sample Item(2)\"}\r\n    ],   \r\n}\r\n\r\nconst reducer = (state=initialState, action) => {\r\n    switch(action.type) {\r\n        case GET: return {\r\n            ...state\r\n        }\r\n        case ADD: return {\r\n            ...state,\r\n            list: [\r\n                ...state.list,\r\n                {id: uuid(), name:action.payload}\r\n            ]\r\n        }\r\n        case DELETE: return {\r\n            ...state,\r\n            list: [\r\n                ...state.list.filter(item => item.id !== action.payload)\r\n            ]\r\n        }\r\n        default: return state\r\n    }\r\n}\r\n\r\nexport default reducer\r\n","export const GET = 'GET'\r\nexport const ADD = 'ADD'\r\nexport const DELETE = 'DELETE'","import { combineReducers } from 'redux'\r\nimport sampleReducer from './sampleReducer'\r\n\r\nexport default combineReducers({\r\n    sampleItem: sampleReducer\r\n})","import { createStore, applyMiddleware, compose } from 'redux'\r\nimport thunk from 'redux-thunk'\r\nimport Reducer from './Reducers'\r\n\r\nconst initialState = {}\r\n\r\nconst middleware = [thunk]\r\n\r\nconst store = createStore(\r\n        Reducer, \r\n        initialState, \r\n        compose( \r\n            applyMiddleware(...middleware),\r\n            window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n        )\r\n    )\r\n\r\nexport default store","import React, {Component} from 'react'\r\n\r\nclass header extends Component {\r\n    // State \r\n    state = {}\r\n\r\n    // Render \r\n    render () {\r\n        return (\r\n            <React.Fragment>\r\n                {/* Header */}\r\n                <div className=\"header\"> </div>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default header ","import React, {Component} from 'react'\r\n\r\nclass DashboardButton extends Component {\r\n    // State \r\n    state = {}\r\n\r\n    // Render \r\n    render () {\r\n        const { Event } = this.props\r\n         return (\r\n            <React.Fragment>\r\n                {/* SendResults */}\r\n                <div className={`${this.props.label} dashboard-button`} onClick={Event}></div>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default DashboardButton","import React, { Component } from 'react'\r\n\r\n//Redux\r\nimport { connect } from 'react-redux'\r\n//////// Redux Actions ////////\r\n\r\n// Buttons \r\nimport Header from './header'\r\nimport DashboardButton from './DashboardButton'\r\n\r\n// Styled Components\r\nimport styled from 'styled-components'\r\n\r\nconst Grid = styled.div`\r\n    margin: 0 auto;\r\n    display: grid;\r\n    grid-template-columns: 50% 50%;\r\n    grid-row-gap: 4vw;\r\n    grid-column-gap: 1vw; \r\n    grid-auto-rows: 0.5rem;\r\n`\r\n\r\n\r\nclass dashboard extends Component {\r\n    // Local State \r\n    state = {\r\n        // Username, prolly userID?\r\n    }\r\n\r\n    // Create Quiz Handler \r\n    CreateQuiz = () => {\r\n        console.log('Create Quiz Event')\r\n    }\r\n\r\n    // Check Scores Handler \r\n    CheckScores = () => {\r\n        console.log('Check Scores Event')\r\n    }\r\n\r\n    // Arrange Class Handler\r\n    ArrangeClass = () => {\r\n        console.log('Arrange Class Event')\r\n    }\r\n\r\n    // Manage Schedule Handler \r\n    ManageSchedule = () => {\r\n        console.log(\"Manage Schedule Event\")\r\n    }\r\n\r\n    // Test Yourself Handler \r\n    TestYourself = () => {\r\n        console.log('Test Yourself Event')\r\n    }\r\n\r\n    // Send Results Handler\r\n    SendResults = () => {\r\n        console.log('Send Results Event')\r\n    }\r\n\r\n    // Render \r\n    render () {\r\n        return (\r\n            <div className=\"dashboard-bg\">\r\n                <Grid>\r\n                    <Header />\r\n                        <DashboardButton Event={this.CreateQuiz} label=\"create-quiz\" />\r\n                        <DashboardButton Event={this.CheckScores} label=\"scores\" />\r\n                        <DashboardButton Event={this.ArrangeClass} label=\"arrange-class\" />\r\n                        <DashboardButton Event={this.ManageSchedule} label=\"manage-schedule\" />\r\n                        <DashboardButton Event={this.SendResults} label=\"send-results\" />\r\n                        <DashboardButton Event={this.TestYourself} label=\"test-yourself\" />\r\n                </Grid>         \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n\r\n})\r\n\r\nexport default connect(mapStateToProps, {})(dashboard);","// Sample //\n\n// import Navbar from './components/sample/navbar';\n// import SampleComponents from './components/sample/sampleComponent'\n\nimport React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport './App.css';\n\n// Redux\nimport { Provider } from 'react-redux'\nimport Store from \"./store\"\n\n// UI \nimport Dashboard from './components/Dashboard/dashboard'\n\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Provider store={Store}>\n        <Dashboard />\n      </Provider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}